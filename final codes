import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import seaborn as sns
%matplotlib inline

#First cleaning imdb data

df_imdb = pd.read_csv('imdb.title.basics.csv.gz')
df_imdb.head()

df_imdb_drop = df_imdb.drop(['tconst','original_title','start_year','runtime_minutes'], axis=1)
df_imdb_drop.head()
df_imdb_drop = df_imdb_drop.drop_duplicates(subset=None, keep='first')
df_imdb_drop.head()
df_imdb_drop_rename= df_imdb_drop.rename(columns = {"primary_title": "movie"})
df_imdb_drop_rename.head()
df_imdb_drop.isna().sum()



# Second data cleaning tn data



df_tn = pd.read_csv('tn.movie_budgets.csv.gz')
df_tn.head()
df_tn_drop=df_tn.drop(['id','domestic_gross'], axis=1)
df_tn_drop.head()
df_tn_drop['release_date'] =  pd.to_datetime(df_tn_drop['release_date'], infer_datetime_format=True)
df_tn_drop.head()

#delete of money signs in df_tn "production_budget."
df_tn_drop['production_budget'] = df_tn_drop['production_budget'].str.replace('$', '')
df_tn_drop
#delete commas in df_tn "production_budget."
df_tn_drop['production_budget'] = df_tn_drop['production_budget'].str.replace(',', '')
df_tn_drop.head()
#convert from str to int.
df_tn_drop['production_budget'] = df_tn_drop['production_budget'].astype(int)
df_tn_drop.info()
df_tn_drop['worldwide_gross'] =df_tn_drop['worldwide_gross'].str.replace('$', '')
df_tn_drop
#delete comma"
df_tn_drop['worldwide_gross'] = df_tn_drop['worldwide_gross'].str.replace(',', '')
df_tn_drop
#convert  from str to int.
df_tn_drop['worldwide_gross'] = df_tn_drop['worldwide_gross'].astype(int)
df_tn_drop.info()
df_tn_drop = df_tn_drop.drop_duplicates(subset=None, keep='first')
df_tn_drop.head()
df_tn_drop.isna().sum()



# cleaning last tmdb data

df_tmdb = pd.read_csv('tmdb.movies.csv.gz')
df_tmdb.head()

df_tmdb_drop = df_tmdb.drop(['Unnamed: 0','genre_ids','id','original_language','original_title','popularity','vote_average','vote_count'], axis=1)
df_tmdb_drop.head()
df_tmdb_drop_rename= df_tmdb_drop.rename(columns = {"title": "movie"})
df_tmdb_drop_rename.head()
df_tmdb_drop_rename = df_tmdb_drop_rename.drop_duplicates(subset=None, keep='first')
df_tmdb_drop_rename.head()
df_tmdb_drop.isna().sum()

#Step 2 convert title to lower case.

df_tmdb_drop_rename['movie'] = df_tmdb_drop_rename['movie'].str.lower()
df_tn_drop['movie'] = df_tn_drop['movie'].str.lower()
df_imdb_drop_rename['movie'] = df_imdb_drop_rename['movie'].str.lower()
df_imdb_drop_rename['genres'] = df_imdb_drop_rename['genres'].str.lower()
df_imdb_drop_rename.head()
df_tmdb_drop_rename.head()
df_tn_drop.head()
 
 # step 3 merging data
 
 df_merged = df_tmdb_drop_rename.merge(df_tn_drop, on='movie').merge(df_imdb_drop_rename, on='movie')
df_merged.head()
 # step 4 
 df_merged = df_merged.sort_values(by='movie', ascending=True)
df_merged.head()
  
  
  #step 5
  #run groupby and take only the first instance of each movie group
df_gp_movie = df_merged.groupby('movie')
df_gp_movie.first()
#reassign back to a dataframe object
df_merged_movie = df_gp_movie.first()
df_merged_movie

# step 6

#interested in movie release by month - create new column named "release_month"
df_merged_movie['release_month'] = pd.DatetimeIndex(df_merged_movie['release_date_x']).month
df_merged_movie.head()

# step 7

df_merged_movie['profit'] = df_merged_movie['worldwide_gross'] -df_merged_movie['production_budget']
df_merged_movie['profit'] = df_merged_movie['profit'].astype(int)
df_merged_movie.head()

# step 8

fig, ax = plt.subplots()

ax.scatter(df_merged_movie['production_budget'],df_merged_movie['profit'])
ax.set_title('top_movies')
ax.set_xlabel('production_budget')
ax.set_ylabel('profit')


# step 9


sns.scatterplot(x='release_month', y='profit', data= df_merged_movie)


# step 10

fig, ax = plt.subplots()

ax.scatter(df_merged_movie['production_budget'],df_merged_movie['worldwide_gross'])
ax.set_title('movies_top')
ax.set_xlabel('production_budget (In 100 million)')
ax.set_ylabel('worldwide_gross (in billion)')


# step 11

sns.scatterplot(x='profit', y='genres', data= df_merged_movie

 



















